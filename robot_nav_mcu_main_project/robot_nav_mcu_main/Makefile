##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.13.0-B3] date: [Wed Sep 01 15:48:13 CST 2021] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------
######################################
# target
######################################
TARGET = robot_nav_mcu_main


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build
EXTENSIONS_DIR = $(shell pwd)
TOPFOLDER = $(EXTENSIONS_DIR)/../../..
UTILITIES_DIR = $(TOPFOLDER)/utilities
MIDDLEWARE_DIR = $(TOPFOLDER)/middlewares
DRIVERS_DIR = $(TOPFOLDER)/drivers/stm32_fw_f4

#UROS_APP_FOLDER = $(shell pwd)/../apps/ping_pong

######################################
# code format
######################################
#FORMAT_RESULT:=$(shell ./utilities/astyle-format.sh)
FORMAT_RESULT:=$(shell $(UTILITIES_DIR)/tools/clang-format-all .)

######################################
# source
######################################
# C sources
C_SOURCES =  \
$(EXTENSIONS_DIR)/hal/core/Src/main.c \
$(EXTENSIONS_DIR)/hal/core/Src/gpio.c \
$(EXTENSIONS_DIR)/hal/core/Src/adc.c \
$(EXTENSIONS_DIR)/hal/core/Src/can.c \
$(EXTENSIONS_DIR)/hal/core/Src/dma.c \
$(EXTENSIONS_DIR)/hal/core/Src/freertos.c \
$(EXTENSIONS_DIR)/hal/core/Src/i2c.c \
$(EXTENSIONS_DIR)/hal/core/Src/rtc.c \
$(EXTENSIONS_DIR)/hal/core/Src/spi.c \
$(EXTENSIONS_DIR)/hal/core/Src/tim.c \
$(EXTENSIONS_DIR)/hal/core/Src/usart.c \
$(EXTENSIONS_DIR)/hal/core/Src/wwdg.c \
$(EXTENSIONS_DIR)/hal/core/Src/stm32f4xx_it.c \
$(EXTENSIONS_DIR)/hal/core/Src/stm32f4xx_hal_msp.c \
$(EXTENSIONS_DIR)/hal/core/Src/stm32f4xx_hal_timebase_tim.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc_ex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_adc.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c_ex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc_ex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \
$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_wwdg.c \
$(UTILITIES_DIR)/easylogger/src/elog_utils.c \
$(UTILITIES_DIR)/easylogger/src/elog_async.c \
$(UTILITIES_DIR)/easylogger/src/elog.c \
$(UTILITIES_DIR)/easylogger/src/elog_buf.c \
$(UTILITIES_DIR)/cm_backtrace/fault_test.c \
$(UTILITIES_DIR)/cm_backtrace/cm_backtrace.c \
$(UTILITIES_DIR)/letter-shell/src/shell.c \
$(UTILITIES_DIR)/letter-shell/src/shell_cmd_list.c \
$(UTILITIES_DIR)/letter-shell/src/shell_ext.c \
$(UTILITIES_DIR)/letter-shell/src/shell_companion.c \
$(UTILITIES_DIR)/MultiButton/multi_button.c \
$(UTILITIES_DIR)/lwrb/lwrb.c \
$(UTILITIES_DIR)/check/crc16.c \
$(UTILITIES_DIR)/check/md5.c \
$(UTILITIES_DIR)/SFUD/sfud/src/sfud.c \
$(UTILITIES_DIR)/SFUD/sfud/src/sfud_sfdp.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal_flash.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal_partition.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal.c \
$(UTILITIES_DIR)/FlashDB/src/fdb.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_kvdb.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_tsdb.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_utils.c \
$(UTILITIES_DIR)/cjson/cJSON.c \
$(UTILITIES_DIR)/common_config/system_status/system_status.c \
$(EXTENSIONS_DIR)/hal/core/Src/system_stm32f4xx.c \
$(EXTENSIONS_DIR)/common/sys_paras.c \
$(EXTENSIONS_DIR)/common/common.c \
$(EXTENSIONS_DIR)/common/sys_pubsub.c \
$(EXTENSIONS_DIR)/common/sys_exc.c \
$(EXTENSIONS_DIR)/common/delay.c \
$(EXTENSIONS_DIR)/utilities/letter-shell/shell_port.c \
$(EXTENSIONS_DIR)/utilities/easylogger/elog_port.c \
$(EXTENSIONS_DIR)/utilities/rtt_fal/rtt_fal_flash_sfud_port.c \
$(EXTENSIONS_DIR)/utilities/rtt_fal/rtt_fal_flash_stm32f4.c \
$(EXTENSIONS_DIR)/utilities/sfud/sfud_port.c \
$(EXTENSIONS_DIR)/pal/pal_uros.c \
$(EXTENSIONS_DIR)/fal/fal.c \
$(EXTENSIONS_DIR)/fal/fal_display.c \
$(EXTENSIONS_DIR)/fal/fal_shell.c \
$(EXTENSIONS_DIR)/fal/fal_charge.c \
$(EXTENSIONS_DIR)/fal/fal_button.c \
$(EXTENSIONS_DIR)/fal/fal_motor.c \
$(EXTENSIONS_DIR)/fal/fal_security_mng.c \
$(EXTENSIONS_DIR)/fal/fal_log.c \
$(EXTENSIONS_DIR)/fal/fal_imu.c \
$(EXTENSIONS_DIR)/fal/fal_update.c \
$(EXTENSIONS_DIR)/fal/fal_usound.c \
$(EXTENSIONS_DIR)/fal/fal_pmu.c \
$(EXTENSIONS_DIR)/fal/fal_led.c \
$(EXTENSIONS_DIR)/fal/fal_battery.c \
$(EXTENSIONS_DIR)/fal/fal_misc.c \
$(EXTENSIONS_DIR)/fal/fal_cliff.c \
$(EXTENSIONS_DIR)/fal/fal_fdb.c \
$(EXTENSIONS_DIR)/fal/fal_ota.c \
$(EXTENSIONS_DIR)/hal/drivers/stm32f4xx_hal_uart_emul.c \
$(EXTENSIONS_DIR)/hal/drivers/drv.c \
$(EXTENSIONS_DIR)/hal/drivers/drv_soft_i2c.c \
$(EXTENSIONS_DIR)/hal/hal.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_motor.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_exit.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_battery.c \
$(EXTENSIONS_DIR)/hal/bsp/flash_if.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_led.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_imu.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_tough_edge.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_usart.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_tim.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_motor_syntron.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_motor_fengdekong.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_motor_taizhao.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_pmu.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_eeprom.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_can.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_ntc.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_button.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_simuart_rx.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_simuart_tx.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_unique_id.c \
$(EXTENSIONS_DIR)/hal/bsp/bsp_rtc.c \
$(EXTENSIONS_DIR)/middlewares/microros/custom_memory_manager.c \
$(EXTENSIONS_DIR)/middlewares/microros/allocators.c \
$(EXTENSIONS_DIR)/middlewares/microros/microros_transports.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/croutine.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/event_groups.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/list.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/queue.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/stream_buffer.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/tasks.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/timers.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/MemMang/heap_4.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_utils.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_clock.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_sched.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_unistd.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_pthread.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_pthread_mutex.c
#$(wildcard $(UROS_APP_FOLDER)/*.c)
# Removing heap4 manager while being polite with STM32CubeMX
TMPVAR := $(C_SOURCES)
C_SOURCES := $(filter-out $(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/MemMang/heap_4.c, $(TMPVAR))

# ASM sources
ASM_SOURCES =  \
$(EXTENSIONS_DIR)/hal/core/startup_stm32f407xx.s \
$(UTILITIES_DIR)/cm_backtrace/fault_handler/gcc/cmb_fault.s

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F407xx


# AS includes
AS_INCLUDES =  \
-IInc

# C includes
C_INCLUDES += -I$(EXTENSIONS_DIR)/common
C_INCLUDES += -I$(EXTENSIONS_DIR)/pal 
C_INCLUDES += -I$(EXTENSIONS_DIR)/fal 
C_INCLUDES += -I$(EXTENSIONS_DIR)/hal/drivers 
C_INCLUDES += -I$(EXTENSIONS_DIR)/hal/bsp 
C_INCLUDES += -I$(EXTENSIONS_DIR)/hal/core/Inc
C_INCLUDES += -I$(EXTENSIONS_DIR)/middlewares/microros
C_INCLUDES += -I$(EXTENSIONS_DIR)/middlewares/microros/rmw_microxrcedds_c
C_INCLUDES += -I$(EXTENSIONS_DIR)/utilities/letter-shell
C_INCLUDES += -I$(EXTENSIONS_DIR)/utilities/easylogger
C_INCLUDES += -I$(EXTENSIONS_DIR)/utilities/cm_backtrace
C_INCLUDES += -I$(EXTENSIONS_DIR)/utilities/sfud
C_INCLUDES += -I$(EXTENSIONS_DIR)/utilities/rtt_fal
C_INCLUDES += -I$(EXTENSIONS_DIR)/utilities/flashdb
C_INCLUDES += -I$(EXTENSIONS_DIR)/utilities/common_config/system_status
C_INCLUDES += -I$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Inc
C_INCLUDES += -I$(DRIVERS_DIR)/STM32F4xx_HAL_Driver/Inc/Legacy
C_INCLUDES += -I$(DRIVERS_DIR)/CMSIS/Device/ST/STM32F4xx/Include 
C_INCLUDES += -I$(DRIVERS_DIR)/CMSIS/Include 
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/include 
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/include/private
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/include 
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/CMSIS_RTOS_V2 
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM4F 
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include 
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include/portable/empty_portable 
C_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include/portable 
C_INCLUDES += -I$(MIDDLEWARE_DIR)/microROS/firmware/build/include 
C_INCLUDES += -I$(UTILITIES_DIR)/easylogger/plugins/file 
C_INCLUDES += -I$(UTILITIES_DIR)/easylogger/plugins/flash 
C_INCLUDES += -I$(UTILITIES_DIR)/easylogger/inc 
C_INCLUDES += -I$(UTILITIES_DIR)/cm_backtrace 
C_INCLUDES += -I$(UTILITIES_DIR)/cm_backtrace/Languages/en-US 
C_INCLUDES += -I$(UTILITIES_DIR)/cm_backtrace/Languages/zh-CN 
C_INCLUDES += -I$(UTILITIES_DIR)/letter-shell/src 
C_INCLUDES += -I$(UTILITIES_DIR)/MultiButton 
C_INCLUDES += -I$(UTILITIES_DIR)/lwrb 
C_INCLUDES += -I$(UTILITIES_DIR)/check 
C_INCLUDES += -I$(UTILITIES_DIR)/SFUD/sfud/inc 
C_INCLUDES += -I$(UTILITIES_DIR)/RTT_FAL/inc
C_INCLUDES += -I$(UTILITIES_DIR)/FlashDB/inc 
C_INCLUDES += -I$(UTILITIES_DIR)/cjson 
C_INCLUDES += -I$(UTILITIES_DIR)/common_config/system_status

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2 -Wall
endif

CI_BUILD_NUM=0
#获取commit_id的前8个字符
COMMIT_ID=$(shell git rev-parse --short=8 HEAD)
#获取编译时间
BUILD_TIME=$(shell date +%Y%m%d%H%M%S)
#获取当前分支名
CURRENT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
#设置软件版本号
SOFTWARE_VERSION=5.0.1

#设置型号
MODEL_NAME=CLEAN_CHASSIS
#选择机器人型号
ROBOT = BINGO
CFLAGS += -D ${ROBOT}
#选择电机型号
MOTOR_TYPE = USE_MOTOR_SYNTRON
CFLAGS += -D ${MOTOR_TYPE}

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)" -DCOMMIT_ID=\"$(COMMIT_ID)\" -DBUILD_TIME=\"$(BUILD_TIME)\" -DCURRENT_BRANCH=\"$(CURRENT_BRANCH)\" -DMODEL_NAME=\"$(MODEL_NAME)\"
CFLAGS += -DSOFTWARE_VERSION=\"$(SOFTWARE_VERSION).$(CI_BUILD_NUM)\"
# Microros multithread support platform
CFLAGS += -DPLATFORM_NAME_FREERTOS
#######################################
# LDFLAGS
#######################################
# link script
ifdef IAP
CFLAGS += -DIAP
LDSCRIPT = $(EXTENSIONS_DIR)/hal/core/STM32F407VETx_FLASH_IAP.ld
else
LDSCRIPT = $(EXTENSIONS_DIR)/hal/core/STM32F407VETx_FLASH.ld
endif
# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# printf float
LDFLAGS += -lc -lrdimon -u _printf_float

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin
	cp $(BUILD_DIR)/$(TARGET).elf $(EXTENSIONS_DIR)/${TARGET}.elf

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
OBJECTS += $(EXTENSIONS_DIR)/middlewares/microros/libmicroros.a
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

 ifneq ($(V),1)
 Q       := @
 NULL    := 2>/dev/null
 endif

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@printf "  CC      $(*).c\n"
	$(Q) $(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@printf "  AS      $(*).c\n"
	$(Q) $(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@printf "  LD      $(TARGET).elf\n"
	$(Q) $(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@printf "  SZ      $(TARGET).elf\n"
	$(Q) $(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# microros static lib compile
#######################################
lib_build:
	./lib_build.bash

microros: lib_build all

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

OPENOCD := openocd -f interface/jlink.cfg \
        -c 'transport select swd' \
        -f target/stm32f4x.cfg
# download your program
flash: all
	$(OPENOCD) -c init \
		-c 'reset halt' \
		-c 'flash write_image erase $(BUILD_DIR)/$(TARGET).elf' \
		-c 'reset run' \
		-c exit

images:all
	rm -rf $(BUILD_DIR)/*.o
	rm -rf $(BUILD_DIR)/*.d
	rm -rf $(BUILD_DIR)/*.lst
	rm -rf $(BUILD_DIR)/*.map
	cp $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/${TARGET}-${ROBOT}_${MODEL_NAME}_${MOTOR_TYPE}-${CURRENT_BRANCH}_${COMMIT_ID}-${SOFTWARE_VERSION}.${CI_BUILD_NUM}.elf
	cp $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/${TARGET}-${ROBOT}_${MODEL_NAME}_${MOTOR_TYPE}-${CURRENT_BRANCH}_${COMMIT_ID}-${SOFTWARE_VERSION}.${CI_BUILD_NUM}.hex
	cp $(BUILD_DIR)/$(TARGET).bin $(BUILD_DIR)/${TARGET}-${ROBOT}_${MODEL_NAME}_${MOTOR_TYPE}-${CURRENT_BRANCH}_${COMMIT_ID}-${SOFTWARE_VERSION}.${CI_BUILD_NUM}.bin
	rm -rf $(BUILD_DIR)/$(TARGET).elf
	rm -rf $(BUILD_DIR)/$(TARGET).hex
	rm -rf $(BUILD_DIR)/$(TARGET).bin

#cd ../bootloader/SECoreBin/Makefile_ide && ./prebuild.sh "."
iap:
	rm -rf ../bootloader/SECoreBin/Makefile_ide/Build
	rm -rf ../bootloader/SBSFU/Makefile_ide/Build
	cd ../bootloader/SECoreBin/Makefile_ide && make -j32
	cd ../bootloader/SBSFU/Makefile_ide && make -j32
	touch Makefile
	make IAP=1 -j32
	../bootloader/SECoreBin/Makefile_ide/postbuild.sh "." "$(BUILD_DIR)/$(TARGET).elf" "$(BUILD_DIR)/$(TARGET).bin" "1" "1"
	rm -rf $(BUILD_DIR)/*
	cp Binary/$(TARGET).sfb $(BUILD_DIR)/${TARGET}-${SOFTWARE_VERSION}.${CI_BUILD_NUM}-${ROBOT}_${MODEL_NAME}_${MOTOR_TYPE}-${CURRENT_BRANCH}_${COMMIT_ID}.sfb
	cp Binary/SBSFU_$(TARGET).bin $(BUILD_DIR)/${TARGET}-${SOFTWARE_VERSION}.${CI_BUILD_NUM}-${ROBOT}_${MODEL_NAME}_${MOTOR_TYPE}-${CURRENT_BRANCH}_${COMMIT_ID}.bin
	cp robot_nav_mcu_main.elf $(BUILD_DIR)/${TARGET}-${SOFTWARE_VERSION}.${CI_BUILD_NUM}-${ROBOT}_${MODEL_NAME}_${MOTOR_TYPE}-${CURRENT_BRANCH}_${COMMIT_ID}.elf
download:
	rm -rf flash.jlink
	touch flash.jlink
	echo "r" > flash.jlink
	echo "loadfile Binary/SBSFU_$(TARGET).bin" >> flash.jlink
	echo "r" >> flash.jlink
	echo "exit" >> flash.jlink
	JLinkExe -device STM32F407VE  -si SWD -speed 4000 -CommanderScript ./flash.jlink

# *** EOF ***
