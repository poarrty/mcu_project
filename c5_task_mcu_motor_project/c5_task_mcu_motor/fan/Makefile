##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.14.1] date: [Wed Nov 24 07:45:25 CST 2021] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# user defines
######################################
CI_BUILD_NUM=0
COMMIT_ID=$(shell git rev-parse --short=8 HEAD)
BUILD_TIME=$(shell date +%Y%m%d%H%M%S)
CURRENT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
SOFTWARE_VERSION=0.0.0.1
MODEL_NAME=task_motor

######################################
# target
######################################
TARGET = c5_task_mcu_motor


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Os


#######################################
# paths
#######################################
# Build path
BUILD_DIR = ./build
EXTENSIONS_DIR = $(shell pwd)
TOPFOLDER = $(EXTENSIONS_DIR)/../../../..
PROJECT_TOP_DIR = $(EXTENSIONS_DIR)/..
UTILITIES_DIR = $(TOPFOLDER)/utilities
MIDDLEWARE_DIR = $(TOPFOLDER)/middlewares
DRIVERS_DIR = $(TOPFOLDER)/drivers/stm32_fw_f1

######################################
# source
######################################
# C sources
C_SOURCES =  \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/misc.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c \
$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/CircleLimitation.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/CurrentLimitation.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/EncoderSensor.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/HallSensor.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/Math.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/MC_State_Observer.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/MC_State_Observer_Interface.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/MTPAControl.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/NTCSensor.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/PIRegulator.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/PWMnCurrentFdbk.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/SpeednTorqCtrl.c \
$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/src/UartComm.c \
$(PROJECT_TOP_DIR)/fan/User/src/BLDC.c \
$(PROJECT_TOP_DIR)/fan/User/src/CanBus.c \
$(PROJECT_TOP_DIR)/fan/User/src/JScope.c \
$(PROJECT_TOP_DIR)/fan/User/src/MCTasks.c \
$(PROJECT_TOP_DIR)/fan/User/src/RC4.c \
$(PROJECT_TOP_DIR)/fan/User/src/UITasks.c

TMPVAR := $(C_SOURCES)
C_SOURCES := $(filter-out $(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/MemMang/heap_4.c, $(TMPVAR))

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F103xG \
-DUSE_STDPERIPH_DRIVER \
-DSTM32F10X_HD \
-DRT_USING_ARM_LIBC 

# AS includes
AS_INCLUDES =  \
-IInc

# C includes
C_INCLUDES =  \
-I$(EXTENSIONS_DIR)/Inc \
-I$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Inc/Legacy \
-I$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Inc \
-I$(DRIVERS_DIR)/CMSIS/Device/ST/STM32F1xx/Include \
-I$(DRIVERS_DIR)/CMSIS/Include \
-I$(MIDDLEWARE_DIR)/FreeRTOS/include/private \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/include \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/CMSIS_RTOS_V2 \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM3 \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include/portable/empty_portable \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include/portable \
-I$(PROJECT_TOP_DIR)/fan/User \
-I$(PROJECT_TOP_DIR)/fan/User/inc \
-I$(PROJECT_TOP_DIR)/fan/RTT \
-I$(PROJECT_TOP_DIR)/fan/Libraries/CMSIS/CM3/CoreSupport \
-I$(PROJECT_TOP_DIR)/fan/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x \
-I$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary \
-I$(PROJECT_TOP_DIR)/fan/Libraries/MCLibrary/inc \
-I$(PROJECT_TOP_DIR)/fan/Libraries/STM32F10x_StdPeriph_Driver/inc

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# CFLAGS add some define var
#######################################
CFLAGS += -DCOMMIT_ID=\"$(COMMIT_ID)\" -DBUILD_TIME=\"$(BUILD_TIME)\" -DCURRENT_BRANCH=\"$(CURRENT_BRANCH)\" -DSOFTWARE_VERSION=\"$(SOFTWARE_VERSION)\" -DMODEL_NAME=\"$(MODEL_NAME)\"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F103RDTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

#######################################
# LDFLAGS support printf float
#######################################
LDFLAGS += -lc -lrdimon -u _printf_float

# default action: build all
all: $(BUILD_DIR)/../$(TARGET).a

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects

ifneq ($(V),1)
Q       := @
NULL    := 2>/dev/null
endif

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@printf "  CC      $(*).c\n"
	$(Q) $(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@printf "  AS      $(*).s\n"
	$(Q) $(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/../$(TARGET).a: $(OBJECTS)
	ar cr $(BUILD_DIR)/../$(TARGET).a $(OBJECTS)
	ranlib $(BUILD_DIR)/../$(TARGET).a
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
