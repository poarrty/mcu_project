##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.14.1] date: [Fri Dec 03 19:49:13 CST 2021] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# user defines
######################################
CI_BUILD_NUM=0
COMMIT_ID=$(shell git rev-parse --short=8 HEAD)
BUILD_TIME=$(shell date +%Y%m%d%H%M%S)
CURRENT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
SOFTWARE_VERSION=0.0.1
MODEL_NAME=task_main

######################################
# target
######################################
TARGET = c5_task_mcu_main


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Os


#######################################
# paths
#######################################
# Build path
BUILD_DIR = ../../build
EXTENSIONS_DIR = $(shell pwd)
TOPFOLDER = $(EXTENSIONS_DIR)/../../../../..
PROJECT_TOP_DIR = $(EXTENSIONS_DIR)/../..
UTILITIES_DIR = $(TOPFOLDER)/utilities
MIDDLEWARE_DIR = $(TOPFOLDER)/middlewares
DRIVERS_DIR = $(TOPFOLDER)/drivers/stm32_fw_f1

######################################
# code format
######################################
# FORMAT_RESULT:=$(shell ./utilities/astyle-format.sh)
FORMAT_RESULT:=$(shell $(UTILITIES_DIR)/tools/clang-format-all ../../app ../../common ../../fal ../../hal ../../middlewares ../../pal ../../utilities)

######################################
# source
######################################
# C sources
C_SOURCES =  \
$(EXTENSIONS_DIR)/Src/main.c \
$(EXTENSIONS_DIR)/Src/gpio.c \
$(EXTENSIONS_DIR)/Src/freertos.c \
$(EXTENSIONS_DIR)/Src/dma.c \
$(EXTENSIONS_DIR)/Src/i2c.c \
$(EXTENSIONS_DIR)/Src/rtc.c \
$(EXTENSIONS_DIR)/Src/tim.c \
$(EXTENSIONS_DIR)/Src/usart.c \
$(EXTENSIONS_DIR)/Src/stm32f1xx_it.c \
$(EXTENSIONS_DIR)/Src/stm32f1xx_hal_msp.c \
$(EXTENSIONS_DIR)/Src/stm32f1xx_hal_timebase_tim.c \
$(EXTENSIONS_DIR)/Src/system_stm32f1xx.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_crc.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim_ex.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_crc.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_i2c.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc_ex.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi.c \
$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_utils.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_clock.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_sched.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_unistd.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/source/FreeRTOS_POSIX_pthread.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/croutine.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/event_groups.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/list.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/queue.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/stream_buffer.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/tasks.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/timers.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/MemMang/heap_4.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c \
$(UTILITIES_DIR)/letter-shell/src/shell.c \
$(UTILITIES_DIR)/letter-shell/src/shell_cmd_list.c \
$(UTILITIES_DIR)/letter-shell/src/shell_companion.c \
$(UTILITIES_DIR)/letter-shell/src/shell_ext.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_kvdb.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_tsdb.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_utils.c \
$(UTILITIES_DIR)/FlashDB/src/fdb.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal_flash.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal_partition.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal.c \
$(UTILITIES_DIR)/cm_backtrace/cm_backtrace.c \
$(UTILITIES_DIR)/cjson/cJSON.c \
$(UTILITIES_DIR)/easylogger/src/elog_utils.c \
$(UTILITIES_DIR)/easylogger/src/elog_async.c \
$(UTILITIES_DIR)/easylogger/src/elog.c \
$(UTILITIES_DIR)/easylogger/src/elog_buf.c \
$(PROJECT_TOP_DIR)/middlewares/microros/src/custom_memory_manager.c \
$(PROJECT_TOP_DIR)/middlewares/microros/src/allocators.c \
$(PROJECT_TOP_DIR)/middlewares/microros/src/microros_transports.c \
$(PROJECT_TOP_DIR)/utilities/letter_shell/porting/shell_port.c \
$(PROJECT_TOP_DIR)/utilities/rtt_fal/porting/rtt_fal_flash_gd32f303_port.c \
$(PROJECT_TOP_DIR)/utilities/easylogger/elog_port.c \
$(PROJECT_TOP_DIR)/app/app.c \
$(PROJECT_TOP_DIR)/common/common.c \
$(PROJECT_TOP_DIR)/common/common_def.c \
$(PROJECT_TOP_DIR)/common/crc16.c \
$(PROJECT_TOP_DIR)/common/sys.c \
$(PROJECT_TOP_DIR)/commom/easy_sha512.c \
$(PROJECT_TOP_DIR)/commom/md5.c \
$(PROJECT_TOP_DIR)/fal/fal_misc.c \
$(PROJECT_TOP_DIR)/fal/fal.c \
$(PROJECT_TOP_DIR)/fal/fal_version.c \
$(PROJECT_TOP_DIR)/fal/fal_letter_shell.c \
$(PROJECT_TOP_DIR)/fal/app_led.c \
$(PROJECT_TOP_DIR)/fal/clean_ctrl.c \
$(PROJECT_TOP_DIR)/hal/clean_manage.c \
$(PROJECT_TOP_DIR)/fal/button.c \
$(PROJECT_TOP_DIR)/fal/fal_key.c \
$(PROJECT_TOP_DIR)/fal/fal_ota.c \
$(PROJECT_TOP_DIR)/fal/fal_workstation.c\
$(PROJECT_TOP_DIR)/fal/fal_log.c\
$(PROJECT_TOP_DIR)/hal/bsp/bsp_flash.c \
$(PROJECT_TOP_DIR)/hal/bsp/bsp_gpio_in.c \
$(PROJECT_TOP_DIR)/hal/bsp/bsp_gpio_out.c \
$(PROJECT_TOP_DIR)/hal/bsp/bsp_pwm.c \
$(PROJECT_TOP_DIR)/hal/bsp_i2c.c \
$(PROJECT_TOP_DIR)/hal/bsp_cputime.c \
$(PROJECT_TOP_DIR)/hal/bsp_clean_ctrl.c \
$(PROJECT_TOP_DIR)/hal/driver/drv_usart.c \
$(PROJECT_TOP_DIR)/hal/driver/drv_pca9539.c \
$(PROJECT_TOP_DIR)/hal/hal.c \
$(PROJECT_TOP_DIR)/pal/pal.c \
$(PROJECT_TOP_DIR)/pal/pal_uros.c

TMPVAR := $(C_SOURCES)
C_SOURCES := $(filter-out $(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/MemMang/heap_4.c, $(TMPVAR))

# ASM sources
ASM_SOURCES =  \
startup_stm32f103xe.s \
$(UTILITIES_DIR)/cm_backtrace/fault_handler/gcc/cmb_fault.s




#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F103xG \


# AS includes
AS_INCLUDES =  \
-IInc

# C includes
C_INCLUDES =  \
-I$(EXTENSIONS_DIR)/Inc \
-I$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Inc/Legacy \
-I$(DRIVERS_DIR)/STM32F1xx_HAL_Driver/Inc \
-I$(DRIVERS_DIR)/CMSIS/Device/ST/STM32F1xx/Include \
-I$(DRIVERS_DIR)/CMSIS/Include \
-I$(MIDDLEWARE_DIR)/FreeRTOS/include/private \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/include \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/CMSIS_RTOS_V2 \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM3 \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include/portable/empty_portable \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS-Plus-POSIX/include/portable \
-I$(MIDDLEWARE_DIR)/microROS/firmware/build/include \
-I$(UTILITIES_DIR)/cm_backtrace \
-I$(UTILITIES_DIR)/cm_backtrace/Languages/en-US \
-I$(UTILITIES_DIR)/cm_backtrace/Languages/zh-CN \
-I$(UTILITIES_DIR)/MultiButton \
-I$(UTILITIES_DIR)/letter-shell/src \
-I$(UTILITIES_DIR)/FlashDB/inc \
-I$(UTILITIES_DIR)/RTT_FAL/inc \
-I$(UTILITIES_DIR)/cjson \
-I$(UTILITIES_DIR)/easylogger/plugins/file \
-I$(UTILITIES_DIR)/easylogger/plugins/flash \
-I$(UTILITIES_DIR)/easylogger/inc \
-I$(PROJECT_TOP_DIR)/middlewares/microros \
-I$(PROJECT_TOP_DIR)/middlewares/microros/src \
-I$(PROJECT_TOP_DIR)/utilities/letter_shell/porting \
-I$(PROJECT_TOP_DIR)/utilities/flashdb/porting \
-I$(PROJECT_TOP_DIR)/utilities/rtt_fal/porting \
-I$(PROJECT_TOP_DIR)/utilities/cm_backtrace \
-I$(PROJECT_TOP_DIR)/utilities/easylogger \
-I$(PROJECT_TOP_DIR)/app \
-I$(PROJECT_TOP_DIR)/common \
-I$(PROJECT_TOP_DIR)/fal \
-I$(PROJECT_TOP_DIR)/hal \
-I$(PROJECT_TOP_DIR)/hal/bsp \
-I$(PROJECT_TOP_DIR)/hal/driver \
-I$(PROJECT_TOP_DIR)/hal/core/Inc \
-I$(PROJECT_TOP_DIR)/pal \

MICROROS_INCLUDES += -I$(MIDDLEWARE_DIR)/FreeRTOS/include
C_INCLUDES += $(MICROROS_INCLUDES)

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# CFLAGS add some define var
#######################################
CFLAGS += -DCOMMIT_ID=\"$(COMMIT_ID)\" -DBUILD_TIME=\"$(BUILD_TIME)\" -DCURRENT_BRANCH=\"$(CURRENT_BRANCH)\" -DMODEL_NAME=\"$(MODEL_NAME)\"
CFLAGS += -DSOFTWARE_VERSION=\"$(SOFTWARE_VERSION).$(CI_BUILD_NUM)\"
# Microros multithread support platform
CFLAGS += -DPLATFORM_NAME_FREERTOS
#######################################
# LDFLAGS
#######################################
# link script
ifdef IAP
CFLAGS += -DIAP
LDSCRIPT = STM32F103RDTx_FLASH_IAP.ld
else
LDSCRIPT = STM32F103RDTx_FLASH.ld
endif

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

#######################################
# LDFLAGS support printf float
#######################################
LDFLAGS += -lc -lrdimon -u _printf_float

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin
	cp $(BUILD_DIR)/$(TARGET).elf $(EXTENSIONS_DIR)/${TARGET}.elf


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
OBJECTS += $(PROJECT_TOP_DIR)/middlewares/microros/lib/libmicroros.a
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

ifneq ($(V),1)
Q       := @
NULL    := 2>/dev/null
endif

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@printf "  CC      $(*).c\n"
	$(Q) $(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@printf "  AS      $(*).s\n"
	$(Q) $(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@printf "  LD      $(TARGET).elf\n"
	$(Q) $(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@printf "  SZ      $(TARGET).elf\n"
	$(Q) $(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# microros static lib compile
#######################################
lib_build:
	./lib_build.bash

microros: lib_build all

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

OPENOCD := openocd -f interface/jlink.cfg \
        -c 'transport select swd' \
        -f target/stm32f1x.cfg
# download your program
flash: all
	$(OPENOCD) -c init \
		-c 'reset halt' \
		-c 'flash write_image erase $(BUILD_DIR)/$(TARGET).elf' \
		-c 'reset run' \
		-c exit

images:all
	rm -rf $(BUILD_DIR)/*.o
	rm -rf $(BUILD_DIR)/*.d
	rm -rf $(BUILD_DIR)/*.lst
	rm -rf $(BUILD_DIR)/*.map	
	rm -rf $(BUILD_DIR)/ota*
	cp $(BUILD_DIR)/$(TARGET).bin $(BUILD_DIR)/${TARGET}_${SOFTWARE_VERSION}.${CI_BUILD_NUM}_${CURRENT_BRANCH}_${COMMIT_ID}.bin
	rm -rf $(BUILD_DIR)/$(TARGET).elf
	rm -rf $(BUILD_DIR)/$(TARGET).hex
	rm -rf $(BUILD_DIR)/$(TARGET).bin

iap:
	cd ../../../c5_task_mcu_main_bootloader/hal/ && make iap -j32
	touch Makefile
	make images -j32 IAP=1
	python3 no_compress_ota_packager_python.py
	rm -rf $(BUILD_DIR)/${TARGET}_*
	cp ${TARGET}.elf $(BUILD_DIR)/ota_${TARGET}_${SOFTWARE_VERSION}.${CI_BUILD_NUM}_${CURRENT_BRANCH}_${COMMIT_ID}.elf

download:
	rm -rf flash.jlink
	touch flash.jlink
	echo "r" > flash.jlink
	echo "loadfile ../../build/ota_${TARGET}_${SOFTWARE_VERSION}.${CI_BUILD_NUM}_${CURRENT_BRANCH}_${COMMIT_ID}.bin" >> flash.jlink
	echo "r" >> flash.jlink
	echo "exit" >> flash.jlink
	JLinkExe -device STM32F103RG  -si SWD -speed 4000 -CommanderScript ./flash.jlink

# *** EOF ***
